# Location of the repository, this is used by various tools and commands to
# to identify the packages in this project
APP_REPO := "{{.Repository}}"

# Name of the project. This can be different than the base name of repository.
APP_NAME := "{{.Name}}"

APP_VERSION := $$(git rev-list --abbrev-commit --abbrev=8 --max-count=1 HEAD)
APP_BUILD_DATE := $$(date -u +%Y-%m-%dT%H:%M)
APP_BUILD_BRANCH := $$(git rev-parse --abbrev-ref HEAD)
APP_GO_VERSION := $$(go version | sed -e 's/^[^0-9.]*\([0-9.]*\).*/\1/')

LD_FLAGS := "-X=$(APP_REPO)/$(APP_NAME).AppVersion=$(APP_VERSION)		\
	-X=$(APP_REPO)/$(APP_NAME).AppBuild=$(APP_BUILD_DATE)				\
	-X=$(APP_REPO)/$(APP_NAME).AppBuildBranch=$(APP_BUILD_BRANCH)		\
	-X=$(APP_REPO)/$(APP_NAME).AppGoVersion=$(APP_GO_VERSION)			\
	-X=$(APP_REPO)/$(APP_NAME).AppName=$(APP_NAME)"

BUILD_OUTPUT := ./build/{{.Name}}
RED := $$(tput setaf 1)
NC := $$(tput sgr 0)

# Run tests and build the app if no make command was specified
.PHONY : default
default: test \
	build

# Build the app
.PHONY : build
build: clean
	@echo "$(RED)Building $(APP_NAME), binary will be placed at $(BUILD_OUTPUT)$(NC)"
	@go build -race -ldflags $(LD_FLAGS) -o $(BUILD_OUTPUT) main.go

# Perform linting, vet checks and run tests
.PHONY : test
test: lint 			\
	testmain 		\
	test{{.Name}}

# Perform lint operations
.PHONY : lint
lint:
	@echo "$(RED)Performing lint operation$(NC)"
	@golint ./
	@golint ./$(APP_NAME)
	@echo "$(RED)Performing vet operation$(NC)"
	@go vet ./ ./$(APP_NAME)

# Calculate code coverage of the project. This command sends coverage information
# to http://coveralls.io/ and works only on a CI server. travis-ci is assumed
# by default, but you can change it to whatever CI service you use.
.PHONY : coverage
coverage:
	@echo "$(RED)Calculating code coverage$(NC)"
	@cat coverage_*.profile | sed '1!{/^mode: atomic/d;}' > coverage_all.out
	@goveralls -coverprofile coverage_all.out -service travis-pro -repotoken $(COVERALLS_TOKEN)

.PHONY : testmain
testmain:
	@echo "$(RED)Running main test suite$(NC)"
	@go test -race -cover -timeout 5s -covermode=atomic -coverprofile=coverage_main.profile -v ./

.PHONY : test{{.Name}}
test{{.Name}}:
	@echo "$(RED)Running {{.Name}} test suite$(NC)"
	@go test -race -cover -timeout 5s -covermode=atomic -coverprofile=coverage_main.profile -v ./{{.Name}}

.PHONY : release
release: test	\
	coverage	\
	build

.PHONY : tools
tools:
	@echo "$(RED)Installing tools [golint, cover, gocov, goverall, mockery, mock]$(NC)"
	@go get -u github.com/golang/lint/golint
	@go get -u golang.org/x/tools/cmd/cover
	@go get -u github.com/axw/gocov/gocov
	@go get -u github.com/mattn/goveralls
	@go get -u github.com/vektra/mockery/.../
	@go get -u github.com/stretchr/testify/mock

.PHONY : mocks
mocks:
	@echo "$(RED)"
	@$$GOPATH/bin/mockery -all -output=mocks -case=underscore -note="==== Machine generated code. Do not edit this file ==== //"
	@echo "$(NC)"

.PHONY : clean
clean:
	@echo "$(RED)Removing build directory$(NC)"
	-@rm -rf build/ 2> /dev/null
	@echo "$(RED)Removing coverage profiles$(NC)"
	-@rm coverage_*.profile coverage_all.out 2> /dev/null
	@echo "$(RED)Removing generated mocks$(NC)"
	-@rm -rf ./mocks 2> /dev/null
