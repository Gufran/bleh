// Code generated by go-bindata.
// sources:
// assets/Makefile
// assets/app.tpl
// assets/gitignore
// assets/main.tpl
// assets/travis.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x6f\x6f\xdb\xb6\x13\x7e\x1d\x7d\x8a\xfb\xa5\x0e\x12\xf7\x17\x89\xcd\x80\x01\x9b\x07\x17\x75\x12\x2f\x09\x96\xda\x46\xea\x16\x2b\xfa\x27\xa0\x25\xca\xe6\x22\x91\x02\x45\x39\x35\xba\x7e\xf7\xdd\x51\x92\x25\xb9\xf5\x90\x57\x0b\x02\x5a\x12\xef\x9e\xbb\x7b\xf8\xf0\xc8\x67\x70\xab\x43\x6e\xa5\x56\xa0\x63\xb0\x2b\x01\x46\x64\x3a\x97\x56\x9b\xcd\x29\xbe\xcb\x1c\xf0\xbf\xc8\x45\x04\x8b\x0d\xac\xb9\x91\xba\xc8\xc1\x6a\x9d\xe4\xc0\x55\x04\xa1\x4e\x53\xfc\xa5\x4f\xde\x33\x1c\x40\x46\x42\x59\x19\x6f\x1c\x56\xc6\xc3\x07\xbe\x14\x88\xa1\x4a\xac\xcc\xe8\xbf\x44\x68\xbd\xd1\x6c\x76\x7f\x37\x9e\x4d\x61\x30\x84\xc3\xaf\x5f\x83\xbb\x6d\xd0\x6f\xdf\x0e\x3d\x44\x9a\xf0\x54\xd4\x19\x55\x4e\x01\xcc\x09\x22\xe4\x0a\x16\x02\x22\x19\xc7\xc2\x60\x2c\x34\xe1\xca\xd9\x2d\x78\x2e\x40\x55\x8e\x4d\x19\x81\x8b\x36\x19\xbd\x1e\xd7\xd1\x08\xdc\xc5\xa1\x89\x77\xe3\xbb\x37\x37\xd3\x09\xcd\xf5\x7a\x27\x4b\x69\xd1\x75\xed\x27\x32\xb7\xe0\xfb\x7c\xb1\xa0\x37\xaa\x52\x36\xef\xc3\x5f\xf0\x31\xe5\x5f\xf0\x7b\xa1\xec\xf0\x0c\xae\xc7\xa3\xcb\xbe\x43\x3b\x7f\x7b\x73\x7b\x79\x7f\x39\x9a\x8f\x2b\xc0\x88\x5b\x01\x7e\x01\xff\x3f\x7a\xef\x1f\xa5\xfe\x51\x34\x3f\xba\x1e\x1c\xbd\x6e\x5b\x9f\xdf\x8d\x26\x17\xd7\x3b\x09\x64\xdc\x60\x35\xdb\x0c\x8c\x88\x5b\x51\xae\xa6\xbb\x69\x6b\x58\x0b\x93\xd3\x32\xfe\x0d\xb4\x58\xbe\x80\xe3\x9c\x7d\xfe\xf0\xf9\x85\xff\x6b\xf0\xe9\xf9\xc7\x93\x0f\xd5\x43\x3f\x78\xce\x3e\x9e\xb1\xe3\xbe\xe7\x61\xe8\xdf\x6f\x47\x57\x6f\x1c\x2d\xfe\x9f\xc3\xde\x49\xbd\x2c\x7d\x56\x3e\x13\x69\xfd\x60\x94\x65\xef\x4a\xf0\xca\xa4\x8a\xdd\x3f\x38\xf8\xe8\x1d\xfc\xbb\xe3\x79\x21\x93\xa8\x32\x68\xb8\x41\xcf\xa7\xfa\x9e\x1b\xae\xc2\x55\x07\xa1\xe4\xeb\x29\xd1\xaf\x74\x37\xf1\x86\xb7\xfe\x53\x12\x20\x9d\x0c\x5b\xdf\x50\x31\x65\x06\xd3\xb7\xf3\xd9\xdb\x39\xf1\x16\xb0\x05\x65\xc9\xb6\xaa\xf2\xee\xc6\x97\xd5\xa2\xd8\xac\xb0\xb8\x18\x96\xc7\x70\xd6\xf7\x26\x17\x9d\xcf\x4b\x03\x2f\xfa\xa4\xf4\xbb\x02\xd5\x2b\x72\x5b\xee\x27\x87\xe6\xd4\xcc\xb3\x0c\x64\x0c\x4a\x43\xca\x1f\x44\xbd\xd1\xe0\x91\xe7\x90\x67\x22\x94\xb1\x14\x91\x17\xcc\xae\xa7\x93\xf7\x30\x80\x48\xc4\xbc\x48\xac\x57\xfd\x0e\x1c\x24\x60\x85\x0e\x90\xe2\x9c\xb7\x91\x1b\xc7\x72\xde\x8d\x03\x08\x13\xc1\x95\x77\xf0\x4a\x84\x2b\x0d\x87\xbd\x13\xac\xa5\xef\xfc\xa4\x5a\x42\x8b\x88\x53\x58\x48\xc5\xcd\x06\x1e\x65\x92\xd0\x6e\xcc\x12\x1e\xa2\xea\xb8\x45\xab\x36\x45\xfd\xde\xc9\xe4\x02\x79\x3b\x78\x85\x0a\x2d\x6b\xf3\x0d\x9a\x82\x9f\x44\x71\xc2\x97\x39\xda\xd7\x32\xec\x83\xaf\x77\xdd\xb1\x76\xa9\x82\xa5\xa6\x02\x66\xc2\xc4\xda\xa4\x90\x48\x6c\x30\x6a\x79\x8a\x8a\xb7\x10\xae\x44\xf8\x50\x52\x67\x6a\x22\x9b\xe2\xe8\xd5\xa3\x61\xe0\xbc\xa0\x5c\x74\xfa\x40\xb8\xb0\x7d\x6b\x56\x6f\x27\x0e\xe8\x4c\x18\xd7\x1e\x5b\xa8\x34\xe1\xd1\x30\xd8\xa1\xaa\xf2\x24\xb2\xba\xce\x2d\x16\xdc\x44\xc0\xda\xcf\x2d\x62\xf7\x03\x52\xb1\x3f\xc2\x73\x13\x01\xdb\x81\xc1\x32\x2e\x78\x12\x16\x09\x75\x9f\x50\x47\x34\x60\x83\xc0\x5e\xbc\xa7\xa9\x56\xea\xca\x05\xf5\xf2\xad\xad\x54\x14\xde\x85\x2c\xbb\xfb\xca\xda\x6c\xc0\x58\x69\x90\x24\x79\x20\x35\x73\xe4\x3f\x6a\x83\xcb\xa0\x55\xb2\xc1\x01\x38\x5c\xdc\x20\x96\x41\xab\x00\xac\xe1\x6b\x99\xfb\xa1\xa4\x93\x84\xe7\x79\x91\xa2\x70\x9f\xd1\x71\x52\x89\x15\xd5\x84\x3b\x62\xa3\x0b\xd7\xdb\x43\x6c\xe7\x14\xda\x52\xbc\xc7\x15\x16\x80\x28\x35\x9e\x44\xe9\x90\x21\x1e\x48\x41\xb3\x20\x75\xbe\x5e\xfd\xb0\xbb\x30\x35\x17\x44\x64\x87\x8d\x2d\x91\x78\x06\x6e\x3f\xde\x3f\x0f\x90\x9d\x58\x26\xa2\x6a\xa6\xc7\x67\xff\xfb\xca\x3e\xa7\xe8\x38\x40\x89\xeb\x54\x86\x2c\xfa\xed\xdb\x31\xbc\x6c\x5c\x90\x8c\x40\x17\xd6\x2d\x49\xc5\x0d\xf8\x6e\xb6\x86\xda\x35\x05\xbf\x2e\xa8\x22\x08\x0d\x71\x73\xe0\xb1\x65\xf5\x83\x50\xb8\x13\x2e\xa6\xd8\xac\x46\xb7\xb7\x6f\xee\xe7\xd3\x3f\xc6\x13\x5c\xd5\x8e\xb0\x49\xc2\x5e\xfd\xb0\x5b\x31\x76\x15\x45\xd5\x3a\x9d\xbb\x5e\x90\x17\xd2\x8a\xb6\x70\xdc\xd7\x6a\x37\xba\xe4\xc0\xb7\x32\x15\x94\xda\xcf\x75\xf2\x54\xf3\xb0\x2c\xb9\x5b\xce\x70\x5b\x8e\xdb\xa1\x75\x91\xfe\x9a\xb4\xdd\xcd\xb3\xd9\x5c\x9d\xb7\x7d\x19\x6f\x0d\xfe\xeb\xb4\x5b\x4d\x60\x9b\xbf\x11\xd8\x11\x73\xe1\x55\xbf\x65\x41\xd4\x35\x6a\x9c\x83\xa6\xc5\x36\x45\xd3\xed\xc8\x73\xe3\x6e\x91\x37\x2a\xb7\xb8\xfe\x54\x67\x79\x87\xfa\x50\x76\x81\xd3\x52\x1e\xa7\xb0\xd4\xf8\x40\x3f\xa5\x88\x4e\x21\xd5\xe1\x83\xa0\xbb\x18\x3d\x7c\x6a\x13\xb1\xc4\x8d\x8f\x17\x0b\xbc\x30\xac\x8a\x45\x80\x3b\x98\x21\x16\xee\x1d\x46\x80\xac\xc4\xed\x5a\xba\xe9\x40\x9b\x25\xfb\xc2\x5c\x78\x16\xa6\x51\xb9\x99\xf7\x41\xf2\x2f\x8f\xcc\xe5\x54\x8e\xfb\xcc\xb0\x47\x58\xc5\xb6\xd2\xdf\x67\xb6\x16\x0f\x28\x76\x56\xd5\xc4\x82\xa0\x6a\x84\x3f\x30\xcd\xad\x11\x36\x5c\x19\x46\x8c\xe3\x7d\xd2\x39\xb5\x48\xa6\xd7\xdc\x73\xe3\x2e\xc9\xc4\x4f\xaf\x77\x35\x9d\x8d\xe6\xd7\x0c\x0f\xaa\x3a\x1e\xf8\x98\x1b\x1e\x32\x05\x9d\xc0\x43\xe7\x8a\xea\xc0\x65\x1d\x16\x2a\xc2\x7b\x42\xa8\x0d\x4a\x41\x69\x2b\x86\x87\x43\xfc\x83\xd7\x3c\x5c\x49\x25\x30\x3b\x45\x8d\x57\x44\xae\x79\x04\x70\xa9\xf1\x58\xb6\x20\x22\x6a\x52\xd4\x3e\x9d\x88\x9c\x0b\x63\x87\xad\x6c\xdc\x62\xb5\xfa\x94\x3b\x5e\xdd\xf8\x9d\xfa\x45\xaa\xd7\x24\x8b\xf2\x90\x8c\xa4\xc1\xe6\x8c\x97\xd7\x7a\xc1\xfd\x57\x78\x22\xf9\x26\x2e\xe7\x19\xfc\xf4\x12\x58\x24\xd6\x4c\x15\x49\xb2\x0f\x6a\xdb\xc6\x2b\x99\xe7\x1d\xb0\x1f\x74\xbb\xef\x5a\xd4\x53\xa2\x34\xe4\x38\x46\xbf\x4b\x38\x60\x25\xd3\x1d\xac\x7f\x02\x00\x00\xff\xff\x8a\xeb\xa8\x9c\x77\x0c\x00\x00")

func assetsMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsMakefile,
		"assets/Makefile",
	)
}

func assetsMakefile() (*asset, error) {
	bytes, err := assetsMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Makefile", size: 3191, mode: os.FileMode(420), modTime: time.Unix(1447490610, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsAppTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x4d\x6b\xdb\x40\x10\x3d\x6b\x7f\xc5\x60\x28\x48\x34\x38\x77\x41\x0e\x4d\x4a\x4d\xa0\x94\x1c\xfa\x71\xe9\x21\x6b\x79\x25\x2d\x95\x76\x97\xd5\xd8\x6a\x30\xfa\xef\x9d\xfd\x90\xb4\x76\x93\xd2\x5c\x9c\x79\x33\xf3\xf6\xbd\x99\x41\x86\x57\xbf\x78\x23\xe0\x7c\xde\x7e\xe1\xbd\x98\x26\xc6\x64\x6f\xb4\x45\xc8\x59\xb6\xa9\x7b\xdc\xd0\x8f\xd4\x1b\x56\x30\x76\xe2\xd6\xa1\xb7\xb7\xe0\x4a\x41\xd7\x80\xad\x00\x6e\x4c\x27\x2b\x8e\x52\x2b\xe0\x03\x88\xdf\x46\x0f\xe2\x00\xa8\x81\xc3\xc3\xe7\x47\xa8\x3a\x29\x14\xb2\xec\x83\x31\xbe\x6d\x40\x2b\x55\xc3\x3c\x0f\x61\xdf\x85\x1d\x5c\xab\x1c\x3c\x5b\xa5\xfb\x5e\x22\xb4\x7c\x68\x81\xd0\xb1\x95\x55\xeb\x13\xfb\xa3\xec\x0e\x30\xd2\x0b\x8d\x50\xc2\x72\x14\x07\xcf\x39\xf7\x5f\xd1\xde\xfb\xf2\x48\x8a\x32\xc8\x0d\x1c\x52\xc1\xb7\xaf\x0f\xbe\x39\x54\xbd\xd6\x7a\x6f\xb9\xa2\x97\x23\x41\x43\x92\xf6\x01\xf9\x2f\x51\x29\xc5\x15\xfb\x4e\x5f\x39\xde\x69\x67\xda\xc8\x4e\x58\x38\xc5\x14\xb6\x1c\x57\xca\xf5\x29\x4f\xbe\x32\x5c\x50\xc3\xd0\xba\xb5\x1d\xc4\x50\x59\x69\xfc\x3a\xc8\x72\xba\x1d\x5a\x89\xa1\x06\x04\xde\x69\xd5\xc0\x28\xb1\x85\x56\x74\xc6\xb3\x7e\x4c\xfa\xee\xe0\x99\xee\x21\x41\xa6\xe9\xd9\x1d\x00\xbe\x18\x01\x8f\xaa\xd6\xee\xe5\x63\x85\x70\x66\x99\xdf\x69\xfc\x8b\x7a\xb2\x94\x6b\xc6\x66\xcd\x69\x5d\x18\x3f\xfc\x8d\x5d\x8e\x2e\x5b\x1d\x2f\x75\x74\xa7\xf5\x51\x55\xb0\x13\xe8\x04\xe5\x45\xd0\x45\x82\xac\xc0\xa3\x55\x3e\xa4\xc8\xeb\x2b\x67\x81\xf1\x06\x6f\x08\x4f\x34\x96\x70\xe9\xdf\xa5\xe3\x83\xe5\xdc\x16\x63\x97\xf2\x0a\xcb\x95\xd1\xc7\x4b\x22\x48\x2f\xaf\x0e\xc9\xa5\x17\x17\x65\xe8\x5b\x62\x4a\x4e\x8b\xa1\x5c\x7a\xe9\x05\x3c\x91\x11\x7c\x79\x72\x0b\xcb\x47\x90\x7a\xfb\xc3\x4a\x14\xb6\x70\x1e\xf7\x5c\xd1\x6d\x40\x79\x07\x1b\x80\x77\xa7\x9f\x6a\xb3\x60\xef\x3d\xf6\x16\xba\x4f\xb5\xbf\x5e\x72\x4a\x9d\xbf\xc1\x12\x3d\xfe\xa3\xa4\xd1\x09\x91\x2b\x71\x45\x2c\xa3\x0f\xca\xf6\x93\x3f\xc2\x3a\x1f\x6f\x20\x34\xdd\x80\xf4\x1f\x1f\xf7\x9b\xae\x81\xc2\x30\x5b\xfa\x67\x1e\xd5\x8c\xc5\xb1\x52\xb8\x8c\xb1\xa0\x19\xfe\x09\x00\x00\xff\xff\xe9\xe8\xaa\x59\xcf\x04\x00\x00")

func assetsAppTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsAppTpl,
		"assets/app.tpl",
	)
}

func assetsAppTpl() (*asset, error) {
	bytes, err := assetsAppTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/app.tpl", size: 1231, mode: os.FileMode(420), modTime: time.Unix(1447498860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsGitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x49\x4c\x2f\xe6\xd2\xcb\x2f\x29\xc9\xd7\xd7\xd2\xe2\xca\xcd\x4f\xce\x2e\x06\x31\x92\x4a\x33\x73\x52\x40\x8c\xe4\xfc\xb2\xd4\xa2\xc4\xf4\xd4\x78\x2d\xae\xe0\xd4\xe2\xe2\xcc\xfc\x3c\xbd\xb2\xcc\x5c\x2e\x40\x00\x00\x00\xff\xff\xc9\x85\xec\x7e\x37\x00\x00\x00")

func assetsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_assetsGitignore,
		"assets/gitignore",
	)
}

func assetsGitignore() (*asset, error) {
	bytes, err := assetsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/gitignore", size: 55, mode: os.FileMode(420), modTime: time.Unix(1447488858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsMainTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xcb\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\x51\xba\x6a\x37\xf5\x18\xe2\x46\x06\x3d\x41\x19\x33\x52\xa4\x49\x49\xe3\x62\x28\xb9\xbb\x43\x85\xf9\xab\xff\xf9\xbc\x96\xd7\x4f\x7e\xa3\xab\xb9\x10\x40\xa9\x8d\x45\x5d\x00\x77\xc4\x73\xf7\xff\x32\x46\x7a\x60\xe3\x5e\x94\x65\x37\xbb\x1c\xfb\x9e\x2b\x9a\x79\x88\x00\xdb\x97\xd6\xe9\x43\x74\x63\x82\xf3\x4f\x57\xd4\x1b\x6d\x1c\x62\x5a\x04\x55\xf7\x45\x0a\x69\xe0\x9e\x9e\xfa\x42\x91\x08\x06\xbf\x00\x00\x00\xff\xff\x02\x35\x11\xb7\x82\x00\x00\x00")

func assetsMainTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainTpl,
		"assets/main.tpl",
	)
}

func assetsMainTpl() (*asset, error) {
	bytes, err := assetsMainTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.tpl", size: 130, mode: os.FileMode(420), modTime: time.Unix(1447499019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTravisYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x48\xcf\xe7\xe2\x4a\xcf\xb7\xe2\x52\x00\x02\x5d\x05\x43\x3d\x53\x2e\xae\xe2\xe4\xa2\xcc\x82\x12\x98\x50\x6e\x62\x76\xaa\x42\x49\x7e\x7e\x4e\x31\xb2\x40\x6e\x7e\x72\x36\x8a\x40\x51\x6a\x4e\x6a\x62\x71\x2a\x17\x17\x20\x00\x00\xff\xff\x6b\x12\x30\x30\x5b\x00\x00\x00")

func assetsTravisYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTravisYml,
		"assets/travis.yml",
	)
}

func assetsTravisYml() (*asset, error) {
	bytes, err := assetsTravisYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/travis.yml", size: 91, mode: os.FileMode(420), modTime: time.Unix(1447488730, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Makefile": assetsMakefile,
	"assets/app.tpl": assetsAppTpl,
	"assets/gitignore": assetsGitignore,
	"assets/main.tpl": assetsMainTpl,
	"assets/travis.yml": assetsTravisYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Makefile": &bintree{assetsMakefile, map[string]*bintree{}},
		"app.tpl": &bintree{assetsAppTpl, map[string]*bintree{}},
		"gitignore": &bintree{assetsGitignore, map[string]*bintree{}},
		"main.tpl": &bintree{assetsMainTpl, map[string]*bintree{}},
		"travis.yml": &bintree{assetsTravisYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

